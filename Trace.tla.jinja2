--------------------------------- MODULE Trace ---------------------------------
EXTENDS Integers, Sequences

\* This execution trace was generated from an actual replica set's log files.
\* Each tuple is <<{{ all_tla_variables | join(', ') }}>>

Trace == <<
{% set comma = joiner(',\n') %}
{%- for state in trace -%}
  {{- comma() -}}
  {{- state.to_tla() -}}
{%- endfor %}>>

\* Adapted from Pressler 2018, including Pressler's comments.

VARIABLES {% set comma = joiner() -%}
{% for field in raft_mongo_variables -%}
  {{ comma() }}
  {{- field -}}
{% endfor %}

{# \* TODO: Why doesn't Pressler need to do this? #}
{% set comma = joiner() -%}
Model == INSTANCE RaftMongo WITH
  MaxClientWriteSize <- 1000,
  Server <- {{ '{' }}{% for i in range(n_servers) %}{{ comma() }}{{ loop.index }}{% endfor %}{{ '}' }}

vars == <<{{ raft_mongo_variables | join(', ') }}>>

VARIABLE i \* the trace index

\* "Reading" a record is just vars = Trace[i], but unfortunately TLC isn’t happy
\* with that, so:
Read == LET Rec == Trace[i]
        IN
{% for field in all_tla_variables %}
  {% if field in raft_mongo_variables %}
           /\ {{ field }} = Rec[{{ loop.index }}]
  {% endif %}
{% endfor %}

\* Unfortunately, TLC also isn’t happy with just Read' – which is equivalent to:
ReadNext == LET Rec == Trace[i']
            IN
{% for field in all_tla_variables %}
  {% if field in raft_mongo_variables %}
               /\ {{ field }}' = Rec[{{ loop.index }}]
  {% endif %}
{% endfor %}

Init == i = 1 /\ Read
Next == \/ i < Len(Trace) /\ i' = i + 1 /\ ReadNext
        \/ UNCHANGED <<i, vars>> \* So that we don’t get a deadlock error in TLC

TraceBehavior == Init /\ [][Next]_<<vars, i>>

\* Because we’re dealing with a finite trace, we only care about safety
\* properties, as liveness concerns only infinite behaviors.
\* TODO: Requires a property named "Safety" in spec? Explain in the paper.
\* TODO: What does this line accomplish? I find adding TraceBehavior to TLA+
\*   Toolbox "Properties" does nothing, but adding Model!Safety works.
THEOREM TraceBehavior => Model!Safety

\* To verify, we check the spec TraceBehavior in TLC , with Model!Safety as a
\* temporal property. As we’re always wary of success, we modify the above trace
\* to ensure that TLC finds an error.
===============================================================================
